
module alu (
  input wire clock,
  input wire [31:0] srca,
  input wire [31:0] srcb,
  input wire [31:0] alucontrol,
  output reg [3:0] aluflags,
  output wire [31:0] aluresult
);

    reg [31:0] sum;
    wire out, overflow; 
    
    full_adder32 adder(
        .a(srca)
        .b(srcb)
        .c_in(0)
        .s(sum)
        .cout(out)
    )

always_ff(posedge clock) begin

    if(alucontrol[8:0] 8'b000001000) begin
        alucontrol <= um; 
        flag[3] = sum[31]; 
        flag[2] = (sum == 32'b0);
        flag[1] = out;
        overflow = (srca[31] == srcb[31]) && (sum[31] == !srca[31]);
        flag[0] = overflow;
        if(flag[0]) begin
            flag[3] = 0;
            flag[2] = 0;
            flag[1] = 0;
            flag[0] = 0;
        end
        if(flag[2]) begin
            flag[3] = 0;
            flag[2] = 1;
            flag[1] = 0;
            flag[0] = 0;
        end

    end

    else begin 
        flag[3] =0;
        flag[2] =0;
        flag[1] =0;
        flag[0] =0;
    end

end
// Compute the 'aluresut' based on the specified instruction,
// the lest significant 0 bits of 'alucontrol' should be:
// 0 00 0 0000 0 - AND
// 0 00 0 0001 0 - EOR (xor)
// 0 00 0 0010 0 - SUB
// 0 00 0 0011 0 - RSS
// 0 00 0 0100 0 - ADD
// 0 00 0 0101 0 - ADC
// 0 00 0 0110 0 - RSC
// 0 00 0 1100 0 - ORR
// 0 00 0 1000 1 - TST
// 0 00 0 1001 1 - TEQ
// 0 00 0 1010 1 - CMP
// 0 00 0 1011 1 - CMN
// 1 00 0 0000 0 - MUL 
// 1 00 0 0001 0 - MLA 
// etc.
// These bits are roughly same as: x op I funct S

// After result is computed, store flags in a 4-bit register:
//   flags[3] = Negative
//   flags[2] = Zero
//   flags[1] = Carry
//   flags[0] = oVerflow


endmodule
